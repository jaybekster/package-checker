#!/usr/bin/env node
'use strict';

var packageChecker = require('../index'),
    settings = {},
    args = process.argv.slice(2),
    help = [
        '',
        ' Usage: package-checker [options]',
        '',
        ' Options:',
        '',
        '  -d, --dev               Check devDependecies',
        '  -p, --prod              Check dependencies',
        '  -D, --directory <dir>   Path to directory having node_modules directory',
        '  -P, --path <file>       Path to package.json file',
        '  -v, --version           Display the version of package-checker',
        '  -h, --help              Display help information',
        ''
    ].join('\n'),
    arg;

while (args.length) {
    arg = args.shift();
    switch (arg) {
        case '--version':
        case '-v':
            console.log(packageChecker.version);
            process.exit(0);
            break;
        case '--help':
        case '-h':
            console.log(help);
            process.exit(0);
            break;
        case '--dev':
        case '-d':
            settings.dev = args.shift();
            if (settings.dev !== 'true' && settings.dev !== 'false') {
                throw new Error('--dev <boolean> required');
            }
            break;
        case '--prod':
        case '-p':
            settings.prod = args.shift();
            if (settings.prod !== 'true' && settings.prod !== 'false') {
                throw new Error('--prod <boolean> required');
            }
            break;
        case '--directory':
        case '-D':
            settings.directory = args.shift();
            if (!settings.directory) {
                throw new Error('--directory <dir> required');
            }
            break;
        case '--path':
        case '-P':
            settings.path = args.shift();
            if (!settings.directory) {
                throw new Error('--path <path> required');
            }
            break;
        default:
            args = ['-h'];
            break;
    }
}

packageChecker(settings);
